// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: match.proto

package match

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchGrpcClient is the client API for MatchGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchGrpcClient interface {
	// 切换区域/随机加入一个区域
	ChangeArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	// 加入到一个指定的区域
	JoinArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	// 用户退出当前所在区域
	ExitArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	// 获取用户区域内信息(获取区域内所有用户id)
	GetAreaInfo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*List, error)
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type matchGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchGrpcClient(cc grpc.ClientConnInterface) MatchGrpcClient {
	return &matchGrpcClient{cc}
}

func (c *matchGrpcClient) ChangeArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/match.MatchGrpc/ChangeArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchGrpcClient) JoinArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/match.MatchGrpc/JoinArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchGrpcClient) ExitArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/match.MatchGrpc/ExitArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchGrpcClient) GetAreaInfo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/match.MatchGrpc/GetAreaInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchGrpcClient) GetUserInfo(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/match.MatchGrpc/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchGrpcServer is the server API for MatchGrpc service.
// All implementations must embed UnimplementedMatchGrpcServer
// for forward compatibility
type MatchGrpcServer interface {
	// 切换区域/随机加入一个区域
	ChangeArea(context.Context, *Req) (*Res, error)
	// 加入到一个指定的区域
	JoinArea(context.Context, *Req) (*Res, error)
	// 用户退出当前所在区域
	ExitArea(context.Context, *Req) (*Res, error)
	// 获取用户区域内信息(获取区域内所有用户id)
	GetAreaInfo(context.Context, *Req) (*List, error)
	// 获取用户信息
	GetUserInfo(context.Context, *Req) (*Res, error)
	mustEmbedUnimplementedMatchGrpcServer()
}

// UnimplementedMatchGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedMatchGrpcServer struct {
}

func (UnimplementedMatchGrpcServer) ChangeArea(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeArea not implemented")
}
func (UnimplementedMatchGrpcServer) JoinArea(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinArea not implemented")
}
func (UnimplementedMatchGrpcServer) ExitArea(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitArea not implemented")
}
func (UnimplementedMatchGrpcServer) GetAreaInfo(context.Context, *Req) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaInfo not implemented")
}
func (UnimplementedMatchGrpcServer) GetUserInfo(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedMatchGrpcServer) mustEmbedUnimplementedMatchGrpcServer() {}

// UnsafeMatchGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchGrpcServer will
// result in compilation errors.
type UnsafeMatchGrpcServer interface {
	mustEmbedUnimplementedMatchGrpcServer()
}

func RegisterMatchGrpcServer(s grpc.ServiceRegistrar, srv MatchGrpcServer) {
	s.RegisterService(&MatchGrpc_ServiceDesc, srv)
}

func _MatchGrpc_ChangeArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchGrpcServer).ChangeArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchGrpc/ChangeArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchGrpcServer).ChangeArea(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchGrpc_JoinArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchGrpcServer).JoinArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchGrpc/JoinArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchGrpcServer).JoinArea(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchGrpc_ExitArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchGrpcServer).ExitArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchGrpc/ExitArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchGrpcServer).ExitArea(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchGrpc_GetAreaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchGrpcServer).GetAreaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchGrpc/GetAreaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchGrpcServer).GetAreaInfo(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchGrpc_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchGrpcServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/match.MatchGrpc/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchGrpcServer).GetUserInfo(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchGrpc_ServiceDesc is the grpc.ServiceDesc for MatchGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "match.MatchGrpc",
	HandlerType: (*MatchGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeArea",
			Handler:    _MatchGrpc_ChangeArea_Handler,
		},
		{
			MethodName: "JoinArea",
			Handler:    _MatchGrpc_JoinArea_Handler,
		},
		{
			MethodName: "ExitArea",
			Handler:    _MatchGrpc_ExitArea_Handler,
		},
		{
			MethodName: "GetAreaInfo",
			Handler:    _MatchGrpc_GetAreaInfo_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _MatchGrpc_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match.proto",
}
