// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: manage.proto

package manage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManageGrpcClient is the client API for ManageGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManageGrpcClient interface {
	// 获取服务
	GetService(ctx context.Context, in *Node, opts ...grpc.CallOption) (*List, error)
}

type manageGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewManageGrpcClient(cc grpc.ClientConnInterface) ManageGrpcClient {
	return &manageGrpcClient{cc}
}

func (c *manageGrpcClient) GetService(ctx context.Context, in *Node, opts ...grpc.CallOption) (*List, error) {
	out := new(List)
	err := c.cc.Invoke(ctx, "/manage.ManageGrpc/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageGrpcServer is the server API for ManageGrpc service.
// All implementations must embed UnimplementedManageGrpcServer
// for forward compatibility
type ManageGrpcServer interface {
	// 获取服务
	GetService(context.Context, *Node) (*List, error)
	mustEmbedUnimplementedManageGrpcServer()
}

// UnimplementedManageGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedManageGrpcServer struct {
}

func (UnimplementedManageGrpcServer) GetService(context.Context, *Node) (*List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedManageGrpcServer) mustEmbedUnimplementedManageGrpcServer() {}

// UnsafeManageGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManageGrpcServer will
// result in compilation errors.
type UnsafeManageGrpcServer interface {
	mustEmbedUnimplementedManageGrpcServer()
}

func RegisterManageGrpcServer(s grpc.ServiceRegistrar, srv ManageGrpcServer) {
	s.RegisterService(&ManageGrpc_ServiceDesc, srv)
}

func _ManageGrpc_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageGrpcServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.ManageGrpc/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageGrpcServer).GetService(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

// ManageGrpc_ServiceDesc is the grpc.ServiceDesc for ManageGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManageGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "manage.ManageGrpc",
	HandlerType: (*ManageGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetService",
			Handler:    _ManageGrpc_GetService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage.proto",
}
