// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: game.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameGrpcClient is the client API for GameGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameGrpcClient interface {
	// 设置玩家所在区域
	SetArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
	// 删除玩家所在区域
	DelArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error)
}

type gameGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGameGrpcClient(cc grpc.ClientConnInterface) GameGrpcClient {
	return &gameGrpcClient{cc}
}

func (c *gameGrpcClient) SetArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/game.GameGrpc/SetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameGrpcClient) DelArea(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Res, error) {
	out := new(Res)
	err := c.cc.Invoke(ctx, "/game.GameGrpc/DelArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameGrpcServer is the server API for GameGrpc service.
// All implementations must embed UnimplementedGameGrpcServer
// for forward compatibility
type GameGrpcServer interface {
	// 设置玩家所在区域
	SetArea(context.Context, *Req) (*Res, error)
	// 删除玩家所在区域
	DelArea(context.Context, *Req) (*Res, error)
	mustEmbedUnimplementedGameGrpcServer()
}

// UnimplementedGameGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedGameGrpcServer struct {
}

func (UnimplementedGameGrpcServer) SetArea(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetArea not implemented")
}
func (UnimplementedGameGrpcServer) DelArea(context.Context, *Req) (*Res, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArea not implemented")
}
func (UnimplementedGameGrpcServer) mustEmbedUnimplementedGameGrpcServer() {}

// UnsafeGameGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameGrpcServer will
// result in compilation errors.
type UnsafeGameGrpcServer interface {
	mustEmbedUnimplementedGameGrpcServer()
}

func RegisterGameGrpcServer(s grpc.ServiceRegistrar, srv GameGrpcServer) {
	s.RegisterService(&GameGrpc_ServiceDesc, srv)
}

func _GameGrpc_SetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameGrpcServer).SetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameGrpc/SetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameGrpcServer).SetArea(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameGrpc_DelArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameGrpcServer).DelArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.GameGrpc/DelArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameGrpcServer).DelArea(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// GameGrpc_ServiceDesc is the grpc.ServiceDesc for GameGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.GameGrpc",
	HandlerType: (*GameGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetArea",
			Handler:    _GameGrpc_SetArea_Handler,
		},
		{
			MethodName: "DelArea",
			Handler:    _GameGrpc_DelArea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game.proto",
}
